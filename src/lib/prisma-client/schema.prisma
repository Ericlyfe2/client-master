// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  username      String   @unique
  email         String   @unique
  passwordHash  String
  firstName     String
  lastName      String
  role          UserRole
  organization  String?
  pharmacyName  String?
  licenseNumber String?
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  consultations         Consultation[]
  assignedConsultations Consultation[]  @relation("PharmacistConsultations")
  messages              Message[]
  deliveries            Delivery[]
  prescriptions         Prescription[]
  orders                Order[]
  inventoryItems        InventoryItem[]
  settings              UserSettings?
  staff                 Staff?

  @@map("users")
}

model Consultation {
  id                   String             @id @default(cuid())
  userId               String?
  anonymousId          String? // For anonymous consultations
  type                 String
  status               ConsultationStatus @default(PENDING)
  description          String?
  symptoms             String?
  medications          String?
  allergies            String?
  age                  Int?
  gender               String?
  isAnonymous          Boolean            @default(false)
  assignedPharmacistId String?
  assignedStaffId      String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  // Relations
  user               User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedPharmacist User?          @relation("PharmacistConsultations", fields: [assignedPharmacistId], references: [id])
  assignedStaff      Staff?         @relation("StaffConsultations", fields: [assignedStaffId], references: [id])
  messages           Message[]
  prescriptions      Prescription[]

  @@map("consultations")
}

model Message {
  id               String      @id @default(cuid())
  chatId           String
  userId           String?
  anonymousId      String?
  content          String
  type             MessageType @default(TEXT)
  isFromPharmacist Boolean     @default(false)
  createdAt        DateTime    @default(now())

  // Relations
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  consultation Consultation? @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Delivery {
  id                String         @id @default(cuid())
  userId            String?
  anonymousId       String?
  orderId           String?        @unique
  status            DeliveryStatus @default(ORDER_CONFIRMED)
  trackingNumber    String         @unique
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  address           String
  city              String
  state             String
  zipCode           String
  dropPoint         String?
  packageType       String         @default("DISCREET")
  isAnonymous       Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id])

  @@map("deliveries")
}

model Medication {
  id                String   @id @default(cuid())
  name              String
  genericName       String?
  description       String?
  dosageForm        String
  strength          String
  manufacturer      String
  isPrescription    Boolean  @default(true)
  isControlled      Boolean  @default(false)
  requiresLicense   Boolean  @default(false)
  sideEffects       String?
  interactions      String?
  contraindications String?
  price             Decimal  @db.Decimal(10, 2)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  inventoryItems InventoryItem[]
  prescriptions  Prescription[]

  @@map("medications")
}

model InventoryItem {
  id             String    @id @default(cuid())
  medicationId   String
  pharmacyId     String
  quantity       Int
  minQuantity    Int       @default(10)
  maxQuantity    Int       @default(1000)
  lotNumber      String?
  expirationDate DateTime?
  location       String?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  medication Medication @relation(fields: [medicationId], references: [id])
  pharmacy   User       @relation(fields: [pharmacyId], references: [id])

  @@unique([medicationId, pharmacyId])
  @@map("inventory_items")
}

model Prescription {
  id             String             @id @default(cuid())
  consultationId String?
  userId         String?
  anonymousId    String?
  medicationId   String
  prescribedBy   String
  dosage         String
  frequency      String
  duration       String
  quantity       Int
  refills        Int                @default(0)
  instructions   String?
  status         PrescriptionStatus @default(PENDING)
  isAnonymous    Boolean            @default(false)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  // Relations
  consultation Consultation? @relation(fields: [consultationId], references: [id])
  user         User?         @relation(fields: [userId], references: [id])
  medication   Medication    @relation(fields: [medicationId], references: [id])
  orders       Order[]

  @@map("prescriptions")
}

model Order {
  id                  String        @id @default(cuid())
  prescriptionId      String?
  userId              String?
  anonymousId         String?
  orderNumber         String        @unique
  status              OrderStatus   @default(PENDING)
  totalAmount         Decimal       @db.Decimal(10, 2)
  paymentStatus       PaymentStatus @default(PENDING)
  paymentMethod       String?
  isAnonymous         Boolean       @default(false)
  specialInstructions String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Relations
  prescription Prescription? @relation(fields: [prescriptionId], references: [id])
  user         User?         @relation(fields: [userId], references: [id])
  delivery     Delivery?

  @@map("orders")
}

model AnonymousSession {
  id             String   @id @default(cuid())
  sessionId      String   @unique
  consultationId String?
  orderId        String?
  deliveryId     String?
  expiresAt      DateTime
  createdAt      DateTime @default(now())

  @@map("anonymous_sessions")
}

model UserSettings {
  id         String @id @default(cuid())
  userId     String @unique
  theme      String @default("light")
  language   String @default("en")
  timezone   String @default("UTC")
  dateFormat String @default("MM/DD/YYYY")

  // Privacy settings
  anonymousConsultations Boolean @default(true)
  dataRetentionPeriod    String  @default("30")
  encryptionLevel        String  @default("aes256")
  autoDeleteChats        Boolean @default(true)
  maskedDeliveryDefault  Boolean @default(true)

  // Delivery settings
  campusDropPoints   String[] @default([])
  deliveryHoursStart String   @default("08:00")
  deliveryHoursEnd   String   @default("20:00")
  emergencyDelivery  Boolean  @default(true)
  deliveryRadius     String   @default("5")
  trackingEnabled    Boolean  @default(true)

  // Notification settings
  newConsultations   Boolean @default(true)
  urgentRequests     Boolean @default(true)
  deliveryUpdates    Boolean @default(true)
  systemAlerts       Boolean @default(true)
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(false)

  // Security settings
  twoFactorAuth            Boolean @default(false)
  sessionTimeout           String  @default("30")
  ipWhitelist              String  @default("")
  auditLogging             Boolean @default(true)
  suspiciousActivityAlerts Boolean @default(true)

  // Consultation settings
  maxActiveChats     String  @default("10")
  responseTimeTarget String  @default("15")
  autoAssignment     Boolean @default(true)
  prioritizeUrgent   Boolean @default(true)
  allowFileUploads   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Staff {
  id               String        @id @default(cuid())
  userId           String        @unique
  employeeId       String        @unique
  position         StaffPosition
  department       String
  hireDate         DateTime
  salary           Decimal?      @db.Decimal(10, 2)
  isActive         Boolean       @default(true)
  emergencyContact String?
  emergencyPhone   String?
  certifications   String[]
  specializations  String[]
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedules             StaffSchedule[]
  assignedConsultations Consultation[]   @relation("StaffConsultations")
  shifts                Shift[]
  timeOffRequests       TimeOffRequest[]

  @@map("staff")
}

model StaffSchedule {
  id         String   @id @default(cuid())
  staffId    String
  dayOfWeek  Int // 0 = Sunday, 1 = Monday, etc.
  startTime  String // Format: "HH:MM"
  endTime    String // Format: "HH:MM"
  breakStart String? // Format: "HH:MM"
  breakEnd   String? // Format: "HH:MM"
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([staffId, dayOfWeek])
  @@map("staff_schedules")
}

model Shift {
  id              String      @id @default(cuid())
  staffId         String
  date            DateTime
  startTime       DateTime
  endTime         DateTime
  status          ShiftStatus @default(SCHEDULED)
  notes           String?
  actualStartTime DateTime?
  actualEndTime   DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@map("shifts")
}

model TimeOffRequest {
  id         String        @id @default(cuid())
  staffId    String
  startDate  DateTime
  endDate    DateTime
  reason     String
  type       TimeOffType
  status     TimeOffStatus @default(PENDING)
  approvedBy String?
  approvedAt DateTime?
  notes      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@map("time_off_requests")
}

enum UserRole {
  CLIENT
  PHARMACY
  ADMIN
}

enum ConsultationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum DeliveryStatus {
  ORDER_CONFIRMED
  PROCESSING
  PACKAGED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PrescriptionStatus {
  PENDING
  APPROVED
  REJECTED
  DISPENSED
  EXPIRED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  READY_FOR_PICKUP
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum StaffPosition {
  PHARMACIST
  PHARMACY_TECHNICIAN
  CASHIER
  MANAGER
  SUPERVISOR
  INTERN
  VOLUNTEER
}

enum ShiftStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum TimeOffType {
  VACATION
  SICK_LEAVE
  PERSONAL_DAY
  BEREAVEMENT
  MATERNITY_PATERNITY
  UNPAID_LEAVE
  OTHER
}

enum TimeOffStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}
