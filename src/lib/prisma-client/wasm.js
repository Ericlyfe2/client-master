
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  organization: 'organization',
  pharmacyName: 'pharmacyName',
  licenseNumber: 'licenseNumber',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConsultationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  anonymousId: 'anonymousId',
  type: 'type',
  status: 'status',
  description: 'description',
  symptoms: 'symptoms',
  medications: 'medications',
  allergies: 'allergies',
  age: 'age',
  gender: 'gender',
  isAnonymous: 'isAnonymous',
  assignedPharmacistId: 'assignedPharmacistId',
  assignedStaffId: 'assignedStaffId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  userId: 'userId',
  anonymousId: 'anonymousId',
  content: 'content',
  type: 'type',
  isFromPharmacist: 'isFromPharmacist',
  createdAt: 'createdAt'
};

exports.Prisma.DeliveryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  anonymousId: 'anonymousId',
  orderId: 'orderId',
  status: 'status',
  trackingNumber: 'trackingNumber',
  estimatedDelivery: 'estimatedDelivery',
  actualDelivery: 'actualDelivery',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  dropPoint: 'dropPoint',
  packageType: 'packageType',
  isAnonymous: 'isAnonymous',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MedicationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  genericName: 'genericName',
  description: 'description',
  dosageForm: 'dosageForm',
  strength: 'strength',
  manufacturer: 'manufacturer',
  isPrescription: 'isPrescription',
  isControlled: 'isControlled',
  requiresLicense: 'requiresLicense',
  sideEffects: 'sideEffects',
  interactions: 'interactions',
  contraindications: 'contraindications',
  price: 'price',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryItemScalarFieldEnum = {
  id: 'id',
  medicationId: 'medicationId',
  pharmacyId: 'pharmacyId',
  quantity: 'quantity',
  minQuantity: 'minQuantity',
  maxQuantity: 'maxQuantity',
  lotNumber: 'lotNumber',
  expirationDate: 'expirationDate',
  location: 'location',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PrescriptionScalarFieldEnum = {
  id: 'id',
  consultationId: 'consultationId',
  userId: 'userId',
  anonymousId: 'anonymousId',
  medicationId: 'medicationId',
  prescribedBy: 'prescribedBy',
  dosage: 'dosage',
  frequency: 'frequency',
  duration: 'duration',
  quantity: 'quantity',
  refills: 'refills',
  instructions: 'instructions',
  status: 'status',
  isAnonymous: 'isAnonymous',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  prescriptionId: 'prescriptionId',
  userId: 'userId',
  anonymousId: 'anonymousId',
  orderNumber: 'orderNumber',
  status: 'status',
  totalAmount: 'totalAmount',
  paymentStatus: 'paymentStatus',
  paymentMethod: 'paymentMethod',
  isAnonymous: 'isAnonymous',
  specialInstructions: 'specialInstructions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnonymousSessionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  consultationId: 'consultationId',
  orderId: 'orderId',
  deliveryId: 'deliveryId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.UserSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  theme: 'theme',
  language: 'language',
  timezone: 'timezone',
  dateFormat: 'dateFormat',
  anonymousConsultations: 'anonymousConsultations',
  dataRetentionPeriod: 'dataRetentionPeriod',
  encryptionLevel: 'encryptionLevel',
  autoDeleteChats: 'autoDeleteChats',
  maskedDeliveryDefault: 'maskedDeliveryDefault',
  campusDropPoints: 'campusDropPoints',
  deliveryHoursStart: 'deliveryHoursStart',
  deliveryHoursEnd: 'deliveryHoursEnd',
  emergencyDelivery: 'emergencyDelivery',
  deliveryRadius: 'deliveryRadius',
  trackingEnabled: 'trackingEnabled',
  newConsultations: 'newConsultations',
  urgentRequests: 'urgentRequests',
  deliveryUpdates: 'deliveryUpdates',
  systemAlerts: 'systemAlerts',
  emailNotifications: 'emailNotifications',
  smsNotifications: 'smsNotifications',
  twoFactorAuth: 'twoFactorAuth',
  sessionTimeout: 'sessionTimeout',
  ipWhitelist: 'ipWhitelist',
  auditLogging: 'auditLogging',
  suspiciousActivityAlerts: 'suspiciousActivityAlerts',
  maxActiveChats: 'maxActiveChats',
  responseTimeTarget: 'responseTimeTarget',
  autoAssignment: 'autoAssignment',
  prioritizeUrgent: 'prioritizeUrgent',
  allowFileUploads: 'allowFileUploads',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  employeeId: 'employeeId',
  position: 'position',
  department: 'department',
  hireDate: 'hireDate',
  salary: 'salary',
  isActive: 'isActive',
  emergencyContact: 'emergencyContact',
  emergencyPhone: 'emergencyPhone',
  certifications: 'certifications',
  specializations: 'specializations',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffScheduleScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  breakStart: 'breakStart',
  breakEnd: 'breakEnd',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShiftScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  notes: 'notes',
  actualStartTime: 'actualStartTime',
  actualEndTime: 'actualEndTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TimeOffRequestScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  startDate: 'startDate',
  endDate: 'endDate',
  reason: 'reason',
  type: 'type',
  status: 'status',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  CLIENT: 'CLIENT',
  PHARMACY: 'PHARMACY',
  ADMIN: 'ADMIN'
};

exports.ConsultationStatus = exports.$Enums.ConsultationStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  FILE: 'FILE',
  SYSTEM: 'SYSTEM'
};

exports.DeliveryStatus = exports.$Enums.DeliveryStatus = {
  ORDER_CONFIRMED: 'ORDER_CONFIRMED',
  PROCESSING: 'PROCESSING',
  PACKAGED: 'PACKAGED',
  IN_TRANSIT: 'IN_TRANSIT',
  OUT_FOR_DELIVERY: 'OUT_FOR_DELIVERY',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

exports.PrescriptionStatus = exports.$Enums.PrescriptionStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  DISPENSED: 'DISPENSED',
  EXPIRED: 'EXPIRED'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  PROCESSING: 'PROCESSING',
  READY_FOR_PICKUP: 'READY_FOR_PICKUP',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.StaffPosition = exports.$Enums.StaffPosition = {
  PHARMACIST: 'PHARMACIST',
  PHARMACY_TECHNICIAN: 'PHARMACY_TECHNICIAN',
  CASHIER: 'CASHIER',
  MANAGER: 'MANAGER',
  SUPERVISOR: 'SUPERVISOR',
  INTERN: 'INTERN',
  VOLUNTEER: 'VOLUNTEER'
};

exports.ShiftStatus = exports.$Enums.ShiftStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

exports.TimeOffType = exports.$Enums.TimeOffType = {
  VACATION: 'VACATION',
  SICK_LEAVE: 'SICK_LEAVE',
  PERSONAL_DAY: 'PERSONAL_DAY',
  BEREAVEMENT: 'BEREAVEMENT',
  MATERNITY_PATERNITY: 'MATERNITY_PATERNITY',
  UNPAID_LEAVE: 'UNPAID_LEAVE',
  OTHER: 'OTHER'
};

exports.TimeOffStatus = exports.$Enums.TimeOffStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Consultation: 'Consultation',
  Message: 'Message',
  Delivery: 'Delivery',
  Medication: 'Medication',
  InventoryItem: 'InventoryItem',
  Prescription: 'Prescription',
  Order: 'Order',
  AnonymousSession: 'AnonymousSession',
  UserSettings: 'UserSettings',
  Staff: 'Staff',
  StaffSchedule: 'StaffSchedule',
  Shift: 'Shift',
  TimeOffRequest: 'TimeOffRequest'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
